My Notes on this Homework:
---------------------------
Notes about me, I'm a professional Java/Javascript developer.  I've never used makefiles nor have I even coded anything remotely big in C nor C++.  I focused on CS Theory in my undergrad, so when it comes to Math and graphs and such, I feel pretty confident.  Needless to say LLVM and its documentation on building shocked me pretty hard.

I had a hell of a time setting up my environment.  I started out on my MacBook Air running OSX 10.9, where I completely misunderstood how to use a Makefile for a good amount of time, about 3 days.  I had clang and clang++ working great, but for some reason I got that confused with llvm-gcc and llvm-gcc++.  So I eventually abandoned that idea and tried to setup on an Ubuntu VM on my mac, only for that to run out of memory once, and take 2+ hours to compile llvm wrong.  So I abandoned that idea and used my work computer to do this assignment.

My work computer is running Red Hat 6, which has an out of date GCC and G++ compiler, since I can only install certain programs on my computer per our lab's rules.  However, I disabled the compiler checks for llvm, and was able to build it successfully, and after staring even longer at how to hell to use opt (a good 4-6 hours of pure confusion) I eventually realized that hello.bc was supposed to be created from the hello.c example, not Hello.cpp as I thought for a good long time (I figured it out before giving into the forum my stupidity).  Once I finally made that jump, I moved directly into Part 2 of the homework.

The amount of C++ and C coding I did as an undergrad might as well be none.  I was initially Computational Media until I realized that I didn't like the design classes (too arty for me), so I switched and took threads that wouldn't delay my graduation date.  Instead, I focused heavily in Java projects and Theory classes, doing smidgens of C++ for graphics and animation.  So the shell shock of the documentation for LLVM Passes was huge, a good 10 hours of my time staring and poking at the Hello World example before I finally felt somewhat comfortable doing parts of part 2 of the homework.

Thanks to the extension, I was able to stare more at the code, and actually make some more progress, but overall, I still couldn't get close to finished with this project.  My goal was to get through part 3.2, and I thought I did until I saw the results of my Warshall's loop, which was completely wrong.

With all of that out of the way, here's my Part 1 (the easy part)

Part 1
------------------
My computer is running Red Hat 6, has 16gb RAM and 4 core 2.3 GHz processor.  Note that I compiled/compressed everything while working at my job, so my times may be sporadic.

With GCC/G++, I compiled using the command 'time -p make' and it gave me the following times:real 28.13, user 25.44, sys 2.58.

With Clang/Clang++, it was much slower using the same command: real 322.02,  user 318.13, sys 3.28.

For the second part, I used only Clang/Clang++ for compiling p7zip, so using the -O1 flag, it took real 164.59, user 246.34, sys 2.04 to compress linux-3.13, and it compressed down to 80Mb.  Using the -O3 flag, it took longer to compress, real 224.29, user 249.30, sys 2.46, and it compressed down to the same size.  

I know that -O3 compiles the files so that they're optimized the most, but I guess that means more code to look through while compiling, even though all functions are inlined.  I didn't time the compilation of p7zip as the instructions didn't tell me to.

Part 2
---------------------
I've created different .cpp files for each pass I've gotten complete, which is Basic Blocks, CFG Edges, and SingleEntryLoopDetector.  LoopDetector.cpp does do the code that gets all loops, but since that's include in part 3.1, I figure why go through the trouble of doing it again.  

Thanks to the extension, I was able to stare and get my dominator tree code working, but I could only do it using PostDominatorTree.  DominatorTree is only defined in the IR folder, and doesn't use the getAnalysisUsuage method at all, so I couldn't use that.

Part 3.1
----------------------
I did this in LoopDetector.cpp.  The strategy here is to look at each loop depth, and detect if it's an outer loop only if the change is from 0 to 1, and to do a back edge detection any time the level depth decreases.  

Part 3.2
----------------------
So, thanks to the extension and snow days, I was able to spend about 10-15 hours on this, specifically learning how to create new classes and create multiple passes in one file, the Part_3-2.cpp file.  Now, the problems I had were with the Warshall Algorithm, specifically my code makes it seem that every edge is a loop, and I don't really get why. Without any real debugging tools, I can really figure out what's going on.  The BackEdge detection does work and detects 22 loops in bfs.cpp.

The specific problems I'm having is that all every path is the same 2 pointers, so I definitely did something wrong that I just can't seem to debug. I definitely feel like I did it right, it's just something minor I'm missing.

Comparing the times, there's no real comparison, Back Edge detection is way faster, giving me results I expect, and is ultimately the method I'd go with.



Part 3.3
----------------------
Yeah...didn't get to it in time, I just legitimately ran out of time.  Even with the extension, I spent the majority of that time debugging the Warshall Algorithm, thinking that would be easier to get done than trying to finish this portion in 3 hours, especially considering my situation.

Conclusion
----------------------
I consider my homework submission a complete disappointment.  Thankfully, the combination of the extension and snow days gave me some time to actually learn some C++ and try to figure out this homework.  I learned a great deal about LLVM and feel that I can read through the code and figure out how to write in this framework, which is the point of this Homework.  I feel that working with someone who is more comfortable with C++ will be advantageous for me, since I definitely feel like I understand the concepts and what is supposedly happening, I'm just going terribly slow learning C++.
